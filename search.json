[{"path":"https://ruiyangli1.github.io/MediationFDR/articles/Example.html","id":"data-generation","dir":"Articles","previous_headings":"","what":"Data generation","title":"Example","text":"Example data (exposure X, outcome Y, potential mediators M) generated follows. subject =1,...,ni = 1, ..., n: Xi∼..dBernoulli(prob=0.5)X_i \\stackrel{..d}{\\sim} Bernoulli(prob = 0.5) Mi,k=αkXi+e1i,kM_{,k} = \\alpha_k X_i + e_{1_{,k}}, e1i,k∼..dN(0,1),k=1,...,pe_{1_{,k}} \\stackrel{..d}{\\sim} N(0, 1), k = 1, ..., p, cov(e1i,k,e1i,j)=ρ∀k≠jcov(e_{1_{,k}},e_{1_{,j}}) = \\rho \\ \\forall \\ k \\ne j Yi=Xi+∑kbkMi,k+e2iY_i = X_i + \\sum_k b_{k} M_{,k} + e_{2_{}}, e2i∼..dN(0,1)e_{2_{}} \\stackrel{..d}{\\sim} N(0, 1) 6th-15th M variables (M6,M7,M8,M9,M10,M11,M12,M13,M14,M15) set true mediators (.e., non-zero alpha beta coefficients). Specifically, first 15 coefficients alpha set take non-zero value , 6th 20th coefficients beta set take non-zero value b, alpha beta coefficients set 0.","code":"## data generation set.seed(20205) data = datagen(n = 1000, p = 100, a = 0.5, b = 0.3, rho = 0.1)"},{"path":"https://ruiyangli1.github.io/MediationFDR/articles/Example.html","id":"mediator-selection","dir":"Articles","previous_headings":"","what":"Mediator selection","title":"Example","text":"","code":"MediationFDR(X = data$X, Y = data$Y, M = data$M, V1 = NULL, V2 = NULL, q1 = 0.025, q2 = 0.025, f_func = \"Diff\", correction_method = \"holm\", weighted = FALSE) #> $med_select #>  [1]  6  7  8  9 10 11 12 13 14 15 #>  #> $path.a #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 #>  #> $path.b #>  [1]  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 22 38 42 86 #>  #> $path.b.tilde #> [1]  1 24 49 60 64 69 82 84 #>  #> $path.b.weighta #>  [1]  6  7  8  9 10 11 12 13 14 15 #>  #> $path.b.tilde.weighta #> [1] 1"},{"path":[]},{"path":"https://ruiyangli1.github.io/MediationFDR/articles/Simulation_code.html","id":"example-data-generation","dir":"Articles","previous_headings":"Correlated mediators with defined correlation structure","what":"Example data generation","title":"Simulation Code","text":"example simulation experiment data (exposure X, outcome Y, potential mediators M) generated follows. subject =1,...,ni = 1, ..., n: Xi∼..dBernoulli(prob=0.5)X_i \\stackrel{..d}{\\sim} Bernoulli(prob = 0.5) Mi,k=αkXi+e1i,kM_{,k} = \\alpha_k X_i + e_{1_{,k}}, e1i,k∼..dN(0,1),k=1,...,pe_{1_{,k}} \\stackrel{..d}{\\sim} N(0, 1), k = 1, ..., p, cov(e1i,k,e1i,j)=ρ∀k≠jcov(e_{1_{,k}},e_{1_{,j}}) = \\rho \\ \\forall \\ k \\ne j Yi=Xi+∑kbkMi,k+e2iY_i = X_i + \\sum_k b_{k} M_{,k} + e_{2_{}}, e2i∼..dN(0,1)e_{2_{}} \\stackrel{..d}{\\sim} N(0, 1) first 6th-15th M variables (M6,M7,⋯,M14,M15M_6,M_7,\\cdots,M_{14},M_{15}) set true mediators (.e., non-zero α\\alpha coefficients (aa) non-zero β\\beta coefficients (bb)), coefficients set 0. example, can generate example simulation experiment data using following code.","code":"## load package library(MediationFDR)  ## data generation set.seed(20205) data = datagen(n = 1000, p = 100, a = 0.5, b = 0.3, rho = 0.1) X = data$X; Y = data$Y; M = data$M"},{"path":"https://ruiyangli1.github.io/MediationFDR/articles/Simulation_code.html","id":"simulation-setting","dir":"Articles","previous_headings":"Correlated mediators with defined correlation structure","what":"Simulation setting","title":"Simulation Code","text":"True mediators: M6,M7,⋯,M14,M15M_6,M_7,\\cdots,M_{14},M_{15} Sample size: N = 1000 Number potential mediators: p = 100, 400 Effect size path-: = 0.3, 0.5 Effect size path-b: b = 0.1, 0.3 Effect size defined correlation structure M: rho = 0.1, 0.3, 0.5 Number simulation runs: 100","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/articles/Simulation_code.html","id":"code","dir":"Articles","previous_headings":"Correlated mediators with defined correlation structure","what":"Code","title":"Simulation Code","text":"","code":"# load packages library(MediationFDR) require(parallel)  require(doParallel)  library(foreach)  library(iterators)  library(dplyr)  # input for simulation N_val = c(1000) K_val = c(100,400) alpha_val = c(0.3,0.5) beta_val = c(0.1,0.3) rho_val = c(0.1,0.3,0.5) method = c(\"Diff\") q1 = c(0.025) q2 = c(0.025)  truth = 6:15 sim = 1:100  # generate seed for each simulation run for reproducibility purposes set.seed(1) seed.df = data.frame(sim, seed = sample(1:10^5, length(sim)))  # specify core numbers for parallel computing  nCores <- 4 ## can be changed manually registerDoParallel(nCores)   # --- simulation (our proposed method) ----  ## Here we use 4 simulations to illustrate the simulation code.  sim = 1:4 re = foreach(n = N_val) %:%   foreach(k = K_val) %:%    foreach(a = alpha_val) %:%   foreach(b = beta_val) %:%    foreach(r = rho_val) %:%   foreach(m = method) %:%    foreach(s = sim,.packages = c(\"glmnet\",\"knockoff\",\"mvtnorm\",\"MediationFDR\")) %dopar% {     set.seed(seed.df$seed[seed.df$sim == s])     # data      dat = datagen(n,k,a,b,r)     X = dat$X; Y = dat$Y; M = dat$M     # method     out = MediationFDR(X = X, Y = Y, M = M, V1 = NULL, V2 = NULL, q1 = q1, q2 = q2, f_func = m, correction_method = \"holm\", weighted = FALSE)     out0 = paste(out$med_select, collapse = \"_\")     out0   } stopImplicitCluster()  #re[[N_val]][[K_val]][[alpha_val]][[beta_val]][[rho_val]][[method]][[sim]] # rename the list N_name_list = paste0(\"N\",N_val) names(re) = N_name_list for (n in 1:length(N_name_list)) {   names(re[[n]]) = paste0(\"K\", K_val)   for (k in 1:length(K_val)) {     names(re[[n]][[k]]) = paste0(\"alpha\",alpha_val)     for (a in 1:length(alpha_val)) {       names(re[[n]][[k]][[a]]) = paste0(\"beta\",beta_val)       for (b in 1:length(beta_val)) {         names(re[[n]][[k]][[a]][[b]]) = paste0(\"rho\",rho_val)         for (r in 1:length(rho_val)) {           names(re[[n]][[k]][[a]][[b]][[r]]) = method           for (m in 1:length(method)) {             names(re[[n]][[k]][[a]][[b]][[r]][[m]]) = paste0(\"sim\",sim) } } } } } }  # compute power,fdr results =    do.call(rbind,lapply(N_val, function(n){     do.call(rbind,lapply(K_val, function(k){       do.call(rbind,lapply(alpha_val, function(a){         do.call(rbind,lapply(beta_val, function(b){           do.call(rbind,lapply(rho_val, function(r){             do.call(rbind,lapply(method, function(m){               do.call(rbind,lapply(sim, function(s){                 out = re[[paste0(\"N\",n)]][[paste0(\"K\",k)]][[paste0(\"alpha\",a)]][[paste0(\"beta\",b)]][[paste0(\"rho\",r)]][[m]][[paste0(\"sim\",s)]]                 select = as.numeric(unlist(strsplit(out, \"_\")))                 power = length(which(select %in% truth))/length(truth)                 fdr = length(which(!select %in% truth))/max(1,length(select))                 data.frame(sim = s, N = n, K = k, alpha = a, beta = b, rho = r, method = m, final_selection = out, power = power, fdr = fdr) })) })) })) })) })) })) })) results = results %>% left_join(seed.df) # store results re.knockoff.corM = results   # ----------------------------------------------------------------------------------------------------   registerDoParallel(nCores)   # --- simulation (HIMA: https://github.com/YinanZheng/HIMA) ----  ## Here we use 4 simulations to illustrate the simulation code.  sim = 1:4 re = foreach(n = N_val) %:%   foreach(k = K_val) %:%    foreach(a = alpha_val) %:%   foreach(b = beta_val) %:%    foreach(r = rho_val) %:%   foreach(s = sim,.packages = c(\"HIMA\",\"mvtnorm\",\"MediationFDR\")) %dopar% {     set.seed(seed.df$seed[seed.df$sim == s])     # data      dat = datagen(n,k,a,b,r)     X = dat$X; Y = dat$Y; M = dat$M     # method     out = hima(X, Y, M)     out   } stopImplicitCluster()  #re[[N_val]][[K_val]][[alpha_val]][[beta_val]][[rho_val]][[sim]] # rename the list N_name_list = paste0(\"N\",N_val) names(re) = N_name_list for (n in 1:length(N_name_list)) {   names(re[[n]]) = paste0(\"K\", K_val)   for (k in 1:length(K_val)) {     names(re[[n]][[k]]) = paste0(\"alpha\",alpha_val)     for (a in 1:length(alpha_val)) {       names(re[[n]][[k]][[a]]) = paste0(\"beta\",beta_val)       for (b in 1:length(beta_val)) {         names(re[[n]][[k]][[a]][[b]]) = paste0(\"rho\",rho_val)         for (r in 1:length(rho_val)) {           names(re[[n]][[k]][[a]][[b]][[r]]) = paste0(\"sim\",sim)         }       }     }   } }  # compute power,fdr results =    do.call(rbind,lapply(N_val, function(n){     do.call(rbind,lapply(K_val, function(k){       do.call(rbind,lapply(alpha_val, function(a){         do.call(rbind,lapply(beta_val, function(b){           do.call(rbind,lapply(rho_val, function(r){             do.call(rbind,lapply(sim, function(s){                              out = re[[paste0(\"N\",n)]][[paste0(\"K\",k)]][[paste0(\"alpha\",a)]][[paste0(\"beta\",b)]][[paste0(\"rho\",r)]][[paste0(\"sim\",s)]]               hima.select = rownames(out)[which(out$Bonferroni.p < 0.05)]               hima.select = gsub(\"M\", \"\", hima.select)               out0 = paste(hima.select, collapse = \"_\")               power = length(which(hima.select %in% truth))/length(truth)               fdr = length(which(!hima.select %in% truth))/max(1,length(hima.select))               data.frame(sim = s, N = n, K = k, alpha = a, beta = b, rho = r, final_selection = out0, power = power, fdr = fdr) })) })) })) })) })) })) results = results %>% left_join(seed.df) # store results re.hima.corM = results   # ----------------------------------------------------------------------------------------------------   registerDoParallel(nCores)   # --- simulation (HIMA2: https://github.com/joyfulstones/HIMA2) ----  ## Here we use 4 simulations to illustrate the simulation code.  ## Note: HIMA2 takes a long time to run. sim = 1:4 re = foreach(n = N_val) %:%   foreach(k = K_val) %:%    foreach(a = alpha_val) %:%   foreach(b = beta_val) %:%    foreach(r = rho_val) %:%   foreach(s = sim,.packages = c(\"mvtnorm\",\"MASS\",\"hdi\",\"HDMT\",\"MediationFDR\")) %dopar% {     set.seed(seed.df$seed[seed.df$sim == s])     # data      dat = datagen(n,k,a,b,r)     # relevant functions for HIMA2     null_estimation = function (input_pvalues)  {     if (is.null(ncol(input_pvalues)))          stop(\"input_pvalues should be a matrix or data frame\")     if (ncol(input_pvalues) != 2)          stop(\"inpute_pvalues should have 2 column\")     input_pvalues <- matrix(as.numeric(input_pvalues), nrow = nrow(input_pvalues))     if (sum(complete.cases(input_pvalues)) < nrow(input_pvalues))          warning(\"input_pvalues contains NAs to be removed from analysis\")     input_pvalues <- input_pvalues[complete.cases(input_pvalues),          ]     if (!is.null(nrow(input_pvalues)) & nrow(input_pvalues) <          1)          stop(\"input_pvalues doesn't have valid p-values\")     pcut <- seq(0.1, 0.8, 0.1)     frac1 <- rep(0, 8)     frac2 <- rep(0, 8)     frac12 <- rep(0, 8)     for (i in 1:8) {         frac1[i] <- mean(input_pvalues[, 1] >= pcut[i])/(1 -              pcut[i])         frac2[i] <- mean(input_pvalues[, 2] >= pcut[i])/(1 -              pcut[i])         frac12[i] <- mean(input_pvalues[, 2] >= pcut[i] & input_pvalues[,              1] >= pcut[i])/(1 - pcut[i])^2     }     alphaout <- matrix(0, 4, 5)     ll <- 1     qqslope <- rep(0, 4)     for (lambda in c(0.5, 0.6, 0.7, 0.8)) {         alpha00 <- min(frac12[pcut >= lambda][1], 1)         if (ks.test(input_pvalues[, 1], \"punif\", 0, 1,              alternative = \"greater\")$p > 0.05)              alpha1 <- 1         else alpha1 <- min(frac1[pcut >= lambda][1], 1)         if (ks.test(input_pvalues[, 2], \"punif\", 0, 1,              alternative = \"greater\")$p > 0.05)              alpha2 <- 1         else alpha2 <- min(frac2[pcut >= lambda][1], 1)         if (alpha00 == 1) {             alpha01 <- 0             alpha10 <- 0             alpha11 <- 0         }         else {             if (alpha1 == 1 & alpha2 == 1) {                 alpha01 <- 0                 alpha10 <- 0                 alpha11 <- 0                 alpha00 <- 1             }             if (alpha1 == 1 & alpha2 != 1) {                 alpha10 <- 0                 alpha11 <- 0                 alpha01 <- alpha1 - alpha00                 alpha01 <- max(0, alpha01)                 alpha00 <- 1 - alpha01             }             if (alpha1 != 1 & alpha2 == 1) {                 alpha01 <- 0                 alpha11 <- 0                 alpha10 <- alpha2 - alpha00                 alpha10 <- max(0, alpha10)                 alpha00 <- 1 - alpha10             }             if (alpha1 != 1 & alpha2 != 1) {                 alpha10 <- alpha2 - alpha00                 alpha10 <- max(0, alpha10)                 alpha01 <- alpha1 - alpha00                 alpha01 <- max(0, alpha01)                 if ((1 - alpha00 - alpha01 - alpha10) < 0) {                   alpha11 <- 0                   alpha10 <- 1 - alpha1                   alpha01 <- 1 - alpha2                   alpha00 <- 1 - alpha10 - alpha01                 }                 else {                   alpha11 <- 1 - alpha00 - alpha01 - alpha10                 }             }         }         pmax <- apply(input_pvalues, 1, max)         pmax <- pmax[order(pmax)]         nnulls <- sum(pmax > 0.8)         nmed <- nrow(input_pvalues)         pexp <- rep(0, nnulls)         for (i in 1:nmed) {             c <- (-i/nmed)             b <- alpha01 + alpha10             a <- 1 - b             if (a == 0) {a = 10^(-10)} #~~~ added             pexp[i] <- (-b + sqrt(b^2 - 4 * a * c))/(2 * a)         }         xx <- -log(pexp[(nmed - nnulls + 1):nmed], base = 10)         yy <- -log(pmax[(nmed - nnulls + 1):nmed], base = 10)         fit1 <- lm(yy ~ xx - 1)         qqslope[ll] <- fit1$coef[1]         alphaout[ll, 1] <- alpha10         alphaout[ll, 2] <- alpha01         alphaout[ll, 3] <- alpha00         alphaout[ll, 4] <- alpha1         alphaout[ll, 5] <- alpha2         ll <- ll + 1     }     bestslope <- which.min(qqslope)     alpha.null <- list(alpha10 = alphaout[bestslope, 1], alpha01 = alphaout[bestslope,          2], alpha00 = alphaout[bestslope, 3], alpha1 = alphaout[bestslope,          4], alpha2 = alphaout[bestslope, 5])     return(alpha.null) }     HIMA2<-function(X,Y,M,Z) { n <- dim(X)[1]  # number of samples p <- dim(M)[2]  # number of mediators d <- dim(X)[2]  # number of exposures #q <- dim(Z)[2]  # number of covariates if (is.null(Z)) {q = 0} else {q <- dim(Z)[2]}  #~~~ modified here  MZX<-cbind(M,Z,X)  ######################################################################### ########################### (Step 1) SIS step ###########################  ######################################################################### message(\"Step 1: Sure Independent Screening ...\", \"  (\", Sys.time(), \")\")  d_0 <- 2*round(n/log(n))  if (d_0 > p) {d_0 = p} #~~~ added here beta_SIS <- matrix(0,1,p)   # Estimate the regression coefficients beta (mediators --> outcome) for (i in 1:p){   ID_S <- c(i, (p+1):(p+q+1))   MZX_SIS <- MZX[,ID_S]   fit <- lsfit(MZX_SIS,Y,intercept = TRUE)   beta_SIS[i] <- fit$coefficients[2] }  # Estimate the regression coefficients alpha (exposure --> mediators) alpha_SIS <- matrix(0,1,p) XZ <- cbind(X,Z) for (i in 1:p){   fit_a  <- lsfit(XZ,M[,i],intercept = TRUE)   est_a <- matrix(coef(fit_a))[2]   alpha_SIS[i] <- est_a }  # Select the d_0 number of mediators with top largest effect  ab_SIS <- alpha_SIS*beta_SIS ID_SIS  <- which(-abs(ab_SIS) <= sort(-abs(ab_SIS))[d_0]) d <- length(ID_SIS)  ######################################################################### ################### (Step 2) De-biased Lasso Estimates ################## ######################################################################### message(\"Step 2: De-biased Lasso Estimates ...\", \"   (\", Sys.time(), \")\")  P_beta_SIS <- matrix(0,1,d) beta_DLASSO_SIS_est <- matrix(0,1,d) beta_DLASSO_SIS_SE <- matrix(0,1,d) MZX_SIS <- MZX[,c(ID_SIS, (p+1):(p+q+1))]  DLASSO_fit <- lasso.proj(x=MZX_SIS, y=Y, family = \"gaussian\",Z = NULL) beta_DLASSO_SIS_est <- DLASSO_fit$bhat[1:d] beta_DLASSO_SIS_SE <- DLASSO_fit$se P_beta_SIS <- t(DLASSO_fit$pval[1:d])  ################### Estimate alpha ################ alpha_SIS_est <- matrix(0,1,d) alpha_SIS_SE <- matrix(0,1,d) P_alpha_SIS <- matrix(0,1,d)  XZ <- cbind(X,Z) for (i in 1:d){   fit_a  <- lsfit(XZ,M[,ID_SIS[i]],intercept = TRUE)   est_a <- matrix(coef(fit_a))[2]   se_a <- ls.diag(fit_a)$std.err[2]   sd_1 <- abs(est_a)/se_a   P_alpha_SIS[i] <- 2*(1-pnorm(sd_1,0,1))  ## the SIS for alpha   alpha_SIS_est[i] <- est_a   alpha_SIS_SE[i] <- se_a }  ######################################################################### ################ (step 3) The multiple-testing  procedure ############### ######################################################################### message(\"Step 3: Joint significance test ...\", \"     (\", Sys.time(), \")\")  PA <- cbind(t(P_alpha_SIS),(t(P_beta_SIS))) P_value <- apply(PA,1,max)  #The joint p-values for SIS variable  N0 <- dim(PA)[1]*dim(PA)[2] input_pvalues <- PA + matrix(runif(N0,0,10^{-10}),dim(PA)[1],2)  # Estimate the proportions of the three component nulls nullprop <- null_estimation(input_pvalues)  # Compute the estimated pointwise FDR for every observed p-max fdrcut  <- fdr_est(nullprop$alpha00,nullprop$alpha01,nullprop$alpha10, nullprop$alpha1,nullprop$alpha2,input_pvalues,exact=0)  ID_fdr <- which(fdrcut <= 0.05)  # Following codes extract the estimates for mediators with fdrcut<=0.05 beta_hat_est <- beta_DLASSO_SIS_est[ID_fdr] beta_hat_SE  <- beta_DLASSO_SIS_SE[ID_fdr]  alpha_hat_est <-  alpha_SIS_est[ID_fdr] alpha_hat_SE  <-  alpha_SIS_SE[ID_fdr]  P.value_raw <- P_value[ID_fdr]  # Indirect effect IDE <- beta_hat_est*alpha_hat_est # mediation(indirect) effect  # Here we name the mediators as M1-Mp and extract the names of significant ones. M<-(sprintf(\"M%d\", 1:p))[ID_SIS[ID_fdr]]  # create a data frame with output values output<-data.frame(cbind(M, alpha=alpha_hat_est,alpha_SE=alpha_hat_SE,beta=beta_hat_est,beta_SE=beta_hat_SE,\"alpha*beta\"=IDE,                            p_val=P.value_raw))  message(\"Done!\", \"     (\", Sys.time(), \")\")  return(output) }     # method     out = HIMA2(X=as.matrix(dat$X), Y=as.matrix(dat$Y), M=as.matrix(dat$M), Z=NULL)     out   } stopImplicitCluster()  #re[[N_val]][[K_val]][[alpha_val]][[beta_val]][[rho_val]][[sim]] # rename the list N_name_list = paste0(\"N\",N_val) names(re) = N_name_list for (n in 1:length(N_name_list)) {   names(re[[n]]) = paste0(\"K\", K_val)   for (k in 1:length(K_val)) {     names(re[[n]][[k]]) = paste0(\"alpha\",alpha_val)     for (a in 1:length(alpha_val)) {       names(re[[n]][[k]][[a]]) = paste0(\"beta\",beta_val)       for (b in 1:length(beta_val)) {         names(re[[n]][[k]][[a]][[b]]) = paste0(\"rho\",rho_val)         for (r in 1:length(rho_val)) {           names(re[[n]][[k]][[a]][[b]][[r]]) = paste0(\"sim\",sim) } } } } }  # compute power,fdr results =    do.call(rbind,lapply(N_val, function(n){     do.call(rbind,lapply(K_val, function(k){       do.call(rbind,lapply(alpha_val, function(a){         do.call(rbind,lapply(beta_val, function(b){           do.call(rbind,lapply(rho_val, function(r){             do.call(rbind,lapply(sim, function(s){               out = re[[paste0(\"N\",n)]][[paste0(\"K\",k)]][[paste0(\"alpha\",a)]][[paste0(\"beta\",b)]][[paste0(\"rho\",r)]][[paste0(\"sim\",s)]]               out0 = paste(gsub(\"M\", \"\", out$M), collapse = \"_\")               hima.select = as.numeric(gsub(\"M\", \"\", out$M))               power = length(which(hima.select %in% truth))/length(truth)               fdr = length(which(!hima.select %in% truth))/max(1,length(hima.select))               data.frame(sim = s, N = n, K = k, alpha = a, beta = b, rho = r, final_selection = out0, power = power, fdr = fdr) })) })) })) })) })) })) results = results %>% left_join(seed.df) # store results re.hima2.corM = results   # ----------------------------------------------------------------------------------------------------   registerDoParallel(nCores)   # --- simulation (MCP_D: https://github.com/SiminaB/MultiMed) ## Here we use 4 simulations to illustrate the simulation code.  sim = 1:4 re = foreach(n = N_val) %:%   foreach(k = K_val) %:%    foreach(a = alpha_val) %:%   foreach(b = beta_val) %:%    foreach(r = rho_val) %:%   foreach(s = sim,.packages = c(\"mvtnorm\",\"MultiMed\",\"MediationFDR\")) %dopar% {     set.seed(seed.df$seed[seed.df$sim == s])     # data      dat = datagen(n,k,a,b,r)     data = data.frame(X = dat$X, Y = dat$Y, dat$M)     # method ##get all M names Mnames <- colnames(data)[-c(1:2)]  ##get exposure/mediator relationships pEM <- sapply(data[,Mnames],                function(m,e){coef(summary(lm(m ~ e)))[2,4]},                e=data$X)  ##get mediator/outcome relationship (conditional on exposure) pMY <- sapply(data[,Mnames],                function(m,y,e){coef(summary(lm(y ~ m + e)))[2,4]},                y=data$Y, e=data$X)  ##perform mediation test for FDR procedures medTest.FDR <- medTest.SBMH(pEM, pMY, MCP.type=\"FDR\", t1 = 0.025, t2 = 0.025) out = Mnames[which(medTest.FDR < 0.05)]      out   } stopImplicitCluster()  #re[[N_val]][[K_val]][[alpha_val]][[beta_val]][[rho_val]][[sim]] # rename the list N_name_list = paste0(\"N\",N_val) names(re) = N_name_list for (n in 1:length(N_name_list)) {   names(re[[n]]) = paste0(\"K\", K_val)   for (k in 1:length(K_val)) {     names(re[[n]][[k]]) = paste0(\"alpha\",alpha_val)     for (a in 1:length(alpha_val)) {       names(re[[n]][[k]][[a]]) = paste0(\"beta\",beta_val)       for (b in 1:length(beta_val)) {         names(re[[n]][[k]][[a]][[b]]) = paste0(\"rho\",rho_val)         for (r in 1:length(rho_val)) {           names(re[[n]][[k]][[a]][[b]][[r]]) = paste0(\"sim\",sim) } } } } }  # compute power,fdr results =    do.call(rbind,lapply(N_val, function(n){     do.call(rbind,lapply(K_val, function(k){       do.call(rbind,lapply(alpha_val, function(a){         do.call(rbind,lapply(beta_val, function(b){           do.call(rbind,lapply(rho_val, function(r){             do.call(rbind,lapply(sim, function(s){               out = re[[paste0(\"N\",n)]][[paste0(\"K\",k)]][[paste0(\"alpha\",a)]][[paste0(\"beta\",b)]][[paste0(\"rho\",r)]][[paste0(\"sim\",s)]]               out0 = paste(gsub(\"M\", \"\", out), collapse = \"_\")               select = as.numeric(gsub(\"M\", \"\", out))               power = length(which(select %in% truth))/length(truth)               fdr = length(which(!select %in% truth))/max(1,length(select))               data.frame(sim = s, N = n, K = k, alpha = a, beta = b, rho = r, final_selection = out0, power = power, fdr = fdr) })) })) })) })) })) })) results = results %>% left_join(seed.df) # store results re.mcp.corM = results   # ----------------------------------------------------------------------------------------------------  # --- combine results  re.corM = rbind(re.knockoff.corM %>% mutate(method = paste0(\"Knockoff_\", method)),                  re.hima.corM %>% mutate(method = \"HIMA\") %>% relocate(method, .after = rho),                  re.hima2.corM %>% mutate(method = \"HIMA2\") %>% relocate(method, .after = rho),                  re.mcp.corM %>% mutate(method = \"MCP\") %>% relocate(method, .after = rho)) ## mean  re.corM.mean = re.corM[,-c(1,8,11)] %>%    group_by(N,K,alpha,beta,method,rho) %>% summarise_all(\"mean\") %>% ungroup() ## plot  library(ggplot2) p1 = re.corM.mean %>%    filter(K %in% c(100)) %>%    mutate(     p = factor(K, levels = K_val,labels = paste0(\"p = \",K_val)),     N = factor(N, levels = N_val,labels = paste0(\"N = \",N_val)),     ES = paste0(\"a=\",alpha,\", b=\",beta),     rho = paste0(\"rho=\",rho),     method = factor(method, levels = c(\"Knockoff_Diff\",\"HIMA2\",\"HIMA\",\"MCP\")),     ) %>%    ggplot(aes(y = power,x = rho,group = method, alpha = method, color = method)) +    geom_point(size = 2) +    geom_line(aes(size = method, linetype = method)) +   scale_size_manual(values = c(1,1,1,1)) +    scale_alpha_manual(values=c(.8,.6,0.6,0.6)) +   scale_linetype_manual(values = c(\"solid\",\"longdash\",\"dotted\",\"dotdash\")) +    facet_grid(~ES, scales = \"free\") +    scale_y_continuous(limits = c(0,1),breaks=c(0,.2,.4,.6,.8,1)) +   geom_hline(yintercept = 0.8, linetype = \"dashed\") +   labs(x = NULL, y = \"Power\", title = \"p = 100\") +    theme_classic() +    theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5),         legend.position=\"top\",legend.title = element_blank(),         legend.key.size = unit(1.8, 'cm')         ) +   scale_color_manual(values=c(\"#EE4C97FF\", \"#5D8CA8FF\", \"#66C2A5FF\",\"#FC8D62FF\"))  p2 = re.corM.mean %>%    filter(K %in% c(400)) %>%    mutate(     p = factor(K, levels = K_val,labels = paste0(\"p = \",K_val)),     N = factor(N, levels = N_val,labels = paste0(\"N = \",N_val)),     ES = paste0(\"a=\",alpha,\", b=\",beta),     rho = paste0(\"rho=\",rho),     method = factor(method, levels = c(\"Knockoff_Diff\",\"HIMA2\",\"HIMA\",\"MCP\")),     ) %>%    ggplot(aes(y = power,x = rho,group = method, alpha = method, color = method)) +    geom_point(size = 2) +    geom_line(aes(size = method, linetype = method)) +   scale_size_manual(values = c(1,1,1,1)) +    scale_alpha_manual(values=c(.8,.6,0.6,0.6)) +   scale_linetype_manual(values = c(\"solid\",\"longdash\",\"dotted\",\"dotdash\")) +    facet_grid(~ES, scales = \"free\") +    scale_y_continuous(limits = c(0,1),breaks=c(0,.2,.4,.6,0.8,1)) +   geom_hline(yintercept = 0.8, linetype = \"dashed\") +   labs(x = NULL, y = \"Power\", title = \"p = 400\") +    theme_classic() +    theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5),         legend.position=\"top\",legend.title = element_blank(),         legend.key.size = unit(1.8, 'cm')         ) +   scale_color_manual(values=c(\"#EE4C97FF\", \"#5D8CA8FF\", \"#66C2A5FF\",\"#FC8D62FF\"))  p3 = re.corM.mean %>%    filter(K %in% c(100)) %>%    mutate(     p = factor(K, levels = K_val,labels = paste0(\"p = \",K_val)),     N = factor(N, levels = N_val,labels = paste0(\"N = \",N_val)),     ES = paste0(\"a=\",alpha,\", b=\",beta),     rho = paste0(\"rho=\",rho),     method = factor(method, levels = c(\"Knockoff_Diff\",\"HIMA2\",\"HIMA\",\"MCP\")),     ) %>%    ggplot(aes(y = fdr,x = rho,group = method, alpha = method, color = method)) +    geom_point(size = 2) +    geom_line(aes(size = method, linetype = method)) +   scale_size_manual(values = c(1,1,1,1)) +    scale_alpha_manual(values=c(.8,.6,0.6,0.6)) +   scale_linetype_manual(values = c(\"solid\",\"longdash\",\"dotted\",\"dotdash\")) +    facet_grid(~ES, scales = \"free\") +    #ylim(0, .4) +    scale_y_continuous(limits = c(0,0.4),breaks=c(0,0.05,0.1,0.2,0.3,0.4)) +   geom_hline(yintercept = 0.05, linetype = \"dashed\") +   labs(x = NULL, y = \"FDR\") +    theme_classic() +    theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5),         legend.position=\"none\",legend.title = element_blank(),         legend.key.size = unit(1.8, 'cm')#,text = element_text(size = 13)         ) +   scale_color_manual(values=c(\"#EE4C97FF\", \"#5D8CA8FF\", \"#66C2A5FF\",\"#FC8D62FF\"))  p4 = re.corM.mean %>%    filter(K %in% c(400)) %>%    mutate(     p = factor(K, levels = K_val,labels = paste0(\"p = \",K_val)),     N = factor(N, levels = N_val,labels = paste0(\"N = \",N_val)),     ES = paste0(\"a=\",alpha,\", b=\",beta),     rho = paste0(\"rho=\",rho),     method = factor(method, levels = c(\"Knockoff_Diff\",\"HIMA2\",\"HIMA\",\"MCP\")),     ) %>%    ggplot(aes(y = fdr,x = rho,group = method, alpha = method, color = method)) +    geom_point(size = 2) +    geom_line(aes(size = method, linetype = method)) +   scale_size_manual(values = c(1,1,1,1)) +    scale_alpha_manual(values=c(.8,.6,0.6,0.6)) +   scale_linetype_manual(values = c(\"solid\",\"longdash\",\"dotted\",\"dotdash\")) +    facet_grid(~ES, scales = \"free\") +    scale_y_continuous(limits = c(0,0.4),breaks=c(0,0.05,0.1,0.2,0.3,0.4)) +   geom_hline(yintercept = 0.05, linetype = \"dashed\") +   labs(x = NULL, y = \"FDR\") +    theme_classic() +    theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5),         legend.position=\"none\",legend.title = element_blank(),         legend.key.size = unit(1.8, 'cm')         ) +   scale_color_manual(values=c(\"#EE4C97FF\", \"#5D8CA8FF\", \"#66C2A5FF\",\"#FC8D62FF\"))  library(patchwork) (p1+plot_spacer()+p2+plot_layout(widths = c(7,.15,7),guides = \"keep\")& theme(legend.position = \"top\"))/(p3+plot_spacer()+p4+plot_layout(widths = c(7,.15,7),guides = \"keep\"))"},{"path":"https://ruiyangli1.github.io/MediationFDR/articles/Simulation_code.html","id":"counter-example","dir":"Articles","previous_headings":"","what":"Counter example","title":"Simulation Code","text":"","code":"# load packages require(parallel)  require(doParallel)  library(foreach)  library(iterators)   library(dplyr)  # generate seed for each simulation run for reproducibility purposes sim = 1:100 set.seed(1) seed.df = data.frame(sim, seed = sample(1:10^5, length(sim)))  # specify core numbers for parallel computing  nCores <- 4  registerDoParallel(nCores)   # simulation setting N_val = c(1000)  # ------ BH in step 1 ------ re = foreach(n = N_val) %:%   foreach(s = sim,.packages = c(\"glmnet\",\"knockoff\",\"mvtnorm\",\"MediationFDR\")) %dopar% {     set.seed(seed.df$seed[seed.df$sim == s])     # data      dat = datagen.counter(n)     # method     out = MediationFDR(X = dat$X, Y = dat$Y, M = dat$M, V1 = dat$V1, V2 = NULL, q1 = 0.1, q2 = 0.1, f_func = \"Diff\", correction_method = \"BH\", weighted = FALSE)     out0 = paste(out$med_select, collapse = \"_\")     out0   } stopImplicitCluster() #re[[N_val]] # --- rename the list names(re) = paste0(\"N\",N_val) # --- compute power,fdr truth = c(10) results1 = do.call(rbind,lapply(N_val, function(n){   do.call(rbind,lapply(sim, function(s){     out = re[[paste0(\"N\",n)]][[s]]     select = as.numeric(unlist(strsplit(out, \"_\")))     power = length(which(select %in% truth))/length(truth)     fdr = length(which(!select %in% truth))/max(1,length(select))     data.frame(sim = s, N = n, final_selection = out, power = power, fdr = fdr)   })) })) results.BH = results1 %>% full_join(seed.df)   registerDoParallel(nCores)  # ------ holm in step 1 ------ re = foreach(n = N_val) %:%   foreach(s = sim,.packages = c(\"glmnet\",\"knockoff\",\"mvtnorm\",\"MediationFDR\")) %dopar% {     set.seed(seed.df$seed[seed.df$sim == s])     # data      dat = datagen.counter(n)     # method     out = MediationFDR(X = dat$X, Y = dat$Y, M = dat$M, V1 = dat$V1, V2 = NULL, q1 = 0.1, q2 = 0.1, f_func = \"Diff\", correction_method = \"holm\", weighted = FALSE)     out0 = paste(out$med_select, collapse = \"_\")     out0   } stopImplicitCluster() #re[[N_val]] # --- rename the list names(re) = paste0(\"N\",N_val) # --- compute power,fdr truth = c(10) results1 = do.call(rbind,lapply(N_val, function(n){   do.call(rbind,lapply(sim, function(s){     out = re[[paste0(\"N\",n)]][[s]]     select = as.numeric(unlist(strsplit(out, \"_\")))     power = length(which(select %in% truth))/length(truth)     fdr = length(which(!select %in% truth))/max(1,length(select))     data.frame(sim = s, N = n, final_selection = out, power = power, fdr = fdr)   })) })) results.holm = results1 %>% full_join(seed.df)   # ------ results ------ mean(results.BH$fdr) mean(results.holm$fdr) mean(results.BH$power) mean(results.holm$power)"},{"path":"https://ruiyangli1.github.io/MediationFDR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ruiyang Li. Maintainer.","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dai R, Li R, Lee S, Liu Y (2024). MediationFDR: Controlling false discovery rate mediator selection high-dimensional data. R package version 1.0.0, https://ruiyangli1.github.io/MediationFDR, https://ruiyangli1.github.io/MediationFDR/, https://github.com/ruiyangli1/MediationFDR.","code":"@Manual{,   title = {MediationFDR: Controlling false discovery rate for mediator selection in high-dimensional data},   author = {Ran Dai and Ruiyang Li and Seonjoo Lee and Ying Liu},   year = {2024},   note = {R package version 1.0.0,     https://ruiyangli1.github.io/MediationFDR,     https://ruiyangli1.github.io/MediationFDR/},   url = {https://github.com/ruiyangli1/MediationFDR}, }"},{"path":"https://ruiyangli1.github.io/MediationFDR/index.html","id":"mediationfdr","dir":"","previous_headings":"","what":"Controlling false discovery rate for mediator selection in high-dimensional data","title":"Controlling false discovery rate for mediator selection in high-dimensional data","text":"Controlling false discovery rate mediator selection high-dimensional data","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/index.html","id":"about","dir":"","previous_headings":"","what":"About","title":"Controlling false discovery rate for mediator selection in high-dimensional data","text":"package contains function select mediators high-dimensional mediators setting FDR control, utilizing recent development knockoff method FDR-controlled variable selection.","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Controlling false discovery rate for mediator selection in high-dimensional data","text":"","code":"## install package # install.packages(\"devtools\") devtools::install_github(\"ruiyangli1/MediationFDR\")  ## load package library(MediationFDR)"},{"path":"https://ruiyangli1.github.io/MediationFDR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Controlling false discovery rate for mediator selection in high-dimensional data","text":"example, please see .","code":"MediationFDR(X, Y, M)"},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/MediationFDR.html","id":null,"dir":"Reference","previous_headings":"","what":"Mediator selection function — MediationFDR","title":"Mediator selection function — MediationFDR","text":"function selects mediators controlling FDR.","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/MediationFDR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mediator selection function — MediationFDR","text":"","code":"MediationFDR(   X,   Y,   M,   V1 = NULL,   V2 = NULL,   q1 = 0.025,   q2 = 0.025,   f_func = \"Diff\",   correction_method = \"holm\",   weighted = FALSE,   binaryOutcome = FALSE )"},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/MediationFDR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mediator selection function — MediationFDR","text":"X exposure interest Y outcome interest M potential mediators V1 confounding variables X-M path V2 confounding variables M-Y path q1 FWER level step 1 q2 FDR controlled level step 4 f_func function form W step 4 correction_method multiple comparison correction method step 1 weighted whether weight Z statistics step 3 binaryOutcome whether outcome binary","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/MediationFDR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mediator selection function — MediationFDR","text":"selected mediators","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/MediationFDR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mediator selection function — MediationFDR","text":"","code":"set.seed(20205) data = datagen(n = 1000, p = 100, a = 0.5, b = 0.3, rho = 0.1) MediationFDR(X = data$X, Y = data$Y, M = data$M, V1 = NULL, V2 = NULL, q1 = 0.025, q2 = 0.025, f_func = \"Diff\", correction_method = \"holm\", weighted = FALSE) #> $med_select #>  [1]  6  7  8  9 10 11 12 13 14 15 #>  #> $path.a #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 #>  #> $path.b #>  [1]  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 22 38 42 86 #>  #> $path.b.tilde #> [1]  1 24 49 60 64 69 82 84 #>  #> $path.b.weighta #>  [1]  6  7  8  9 10 11 12 13 14 15 #>  #> $path.b.tilde.weighta #> [1] 1 #>"},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/datagen.counter.html","id":null,"dir":"Reference","previous_headings":"","what":"Data generation function for counter example — datagen.counter","title":"Data generation function for counter example — datagen.counter","text":"function generates simulation data (exposure X, outcome Y, potential mediators M, covariate V1) counter example. number potential mediators set p = 19. subject = 1, ..., n: \\(X_i \\stackrel{..d}{\\sim} N(0, 1)\\) \\({V_1}_i \\stackrel{..d}{\\sim} N(0, 1)\\) \\(cov(X, V_1) = 0.8\\) \\(M_{,k} = \\alpha_k X_i + {V_1}_i {\\eta_1}_k + e_{1_{,k}}\\), \\(e_{1_{,k}} \\stackrel{..d}{\\sim} N(0, 1), k = 1, ..., p\\), \\(cov(e_{1_{,k}},e_{1_{,j}} = 0)\\) k equal j \\(Y_i = X_i + \\sum_k \\beta_{k} M_{,k} + e_{2_{}}\\), \\(e_{2_{}} \\stackrel{..d}{\\sim} N(0, 1)\\) let \\(\\alpha_1, \\cdots, \\alpha_{10}\\) randomly uniform distribution -1 1 \\(\\alpha_{11}, \\cdots, \\alpha_{19}\\) 0. let \\({\\eta_1}_{11} = 1\\) rest \\(\\eta_1\\) values 0. let \\(\\beta_1, \\cdots, \\beta{9} = 0\\) \\(\\beta_{10}, \\cdots, \\beta{19}\\) either 1 -1, randomly. M10 true mediators (.e., non-zero alpha beta coefficients).","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/datagen.counter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data generation function for counter example — datagen.counter","text":"","code":"datagen.counter(n)"},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/datagen.counter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data generation function for counter example — datagen.counter","text":"n sample size","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/datagen.counter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data generation function for counter example — datagen.counter","text":"resulting data 4 lists: X, Y, M, V1","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/datagen.counter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data generation function for counter example — datagen.counter","text":"","code":"set.seed(23) data = datagen.counter(n = 1000) head(data$X) #>             [,1] #> [1,] -0.02158138 #> [2,]  1.61887846 #> [3,]  1.38667551 #> [4,]  0.20707462 #> [5,]  0.74535031 #> [6,] -0.27278171 head(data$Y) #>            [,1] #> [1,]  1.0435139 #> [2,] -0.2097866 #> [3,]  1.9088426 #> [4,]  4.1112320 #> [5,]  0.4821536 #> [6,]  3.3867542 head(data$M) #>              M1         M2         M3          M4         M5         M6 #> [1,] -1.2256408  1.1419768  1.3049401 -1.45855173  0.3148073 -0.8549353 #> [2,]  0.4658685  0.7749704 -0.4386567 -0.21061086  1.6264951  0.1302713 #> [3,] -0.1527225  0.5862869  0.2699257  0.22264221  0.3244481 -0.6264304 #> [4,] -2.0035015 -1.3615076  0.3444736 -0.07934474 -0.2234448 -0.9655403 #> [5,]  0.8838462 -0.3606156 -2.2570514  1.18961311 -0.6892579 -2.1474007 #> [6,]  0.3454013  0.1318351  0.2379899  0.15684527 -0.8283692 -0.4469036 #>               M7          M8         M9         M10       M11        M12 #> [1,]  1.14250457 -1.54428095  1.1061722 -0.52240556 0.6627643  1.2400793 #> [2,]  1.67418614  0.15069038 -0.5454678  0.02726723 2.0226588 -0.8044814 #> [3,] -0.04889471 -0.04207574 -0.2651397 -0.19133908 1.7051222  0.2159686 #> [4,] -0.64222672 -0.06010606 -0.7196775  0.41883397 0.2807591 -0.7554807 #> [5,] -1.12913004 -1.08489811 -1.0501237  0.02716947 2.4495890 -0.8875516 #> [6,] -0.17651224  0.88816886  1.7812724  0.98816977 0.1787698 -0.9811137 #>             M13         M14         M15         M16        M17        M18 #> [1,]  0.2742722  0.29376461 -1.06084797 -0.86693817  0.6225121  1.7529229 #> [2,] -0.8803008 -0.54220915  0.34068504  0.09062461 -1.0396295 -0.7315671 #> [3,] -0.1246070 -0.15405034  0.03452526  1.00886900 -0.5039592 -1.4885764 #> [4,] -0.2380876  1.32211001 -2.25948456 -1.15507455 -0.2790671 -0.5794965 #> [5,]  0.3692004 -0.01443777 -2.03971243 -1.60878163  0.8863455  0.2435306 #> [6,] -0.5205271  0.88760429 -0.06916727 -0.95773789  1.2067612  0.6582457 #>             M19 #> [1,]  0.3865076 #> [2,] -1.0041114 #> [3,] -1.2114651 #> [4,] -0.4420720 #> [5,]  0.5061796 #> [6,] -0.4733559 head(data$V1) #>            [,1] #> [1,] -0.3023843 #> [2,]  2.0124805 #> [3,]  1.4362650 #> [4,]  0.7872411 #> [5,]  1.4297402 #> [6,] -0.8384281"},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/datagen.html","id":null,"dir":"Reference","previous_headings":"","what":"Data generation function — datagen","title":"Data generation function — datagen","text":"function generates simulation data (exposure X, outcome Y, potential mediators M). subject = 1, ..., n: \\(X_i \\stackrel{..d}{\\sim} Bernoulli(prob = 0.5)\\) \\(M_{,k} = \\alpha_k X_i + e_{1_{,k}}\\), \\(e_{1_{,k}} \\stackrel{..d}{\\sim} N(0, 1), k = 1, ..., p\\), \\(cov(e_{1_{,k}}, e_{1_{,j}}) = \\rho\\) k equal j \\(Y_i = X_i + \\sum_k b_{k} M_{,k} + e_{2_{}}\\), \\(e_{2_{}} \\stackrel{..d}{\\sim} N(0, 1)\\) 6th-15th M variables (.e., M6,M7,...,M14,M15) set true mediators (.e., non-zero alpha beta coefficients). Specifically, first 15 coefficients alpha set take non-zero value , 6th 20th coefficients beta set take non-zero value b, alpha beta coefficients set 0.","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/datagen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data generation function — datagen","text":"","code":"datagen(n, p, a, b, rho)"},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/datagen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data generation function — datagen","text":"n sample size p number potential mediators effect size X-M path (.e., non-zero alpha coefficient) b effect size M-Y path (.e., non-zero beta coefficient) rho effect size correlation structure M","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/datagen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data generation function — datagen","text":"resulting data 3 lists: X, Y M","code":""},{"path":"https://ruiyangli1.github.io/MediationFDR/reference/datagen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data generation function — datagen","text":"","code":"set.seed(20205) data = datagen(n = 1000, p = 100, a = 0.5, b = 0.3, rho = 0.1) head(data$X) #> [1] 0 1 0 1 1 0 head(data$Y) #>            [,1] #> [1,]  0.1358174 #> [2,] -0.7465296 #> [3,]  0.9623505 #> [4,] -0.8921536 #> [5,]  4.0902124 #> [6,]  1.5694765 head(data$M) #>              M1          M2          M3          M4         M5          M6 #> [1,]  0.5027504 -0.16291036  2.28875009 -0.22211516  1.4444724 -0.09632082 #> [2,]  2.8842757  0.67104604 -0.05653073 -0.03181477 -1.4822663  0.94140738 #> [3,]  0.8806485  2.52424586 -0.70099327 -0.19855981 -1.4190167 -0.07663935 #> [4,]  1.7024567 -0.37017428  0.58538969  1.01723077 -0.3836153  0.03433381 #> [5,]  1.3613710 -0.02651447 -0.25478171  2.56942075  0.9977460 -0.65373616 #> [6,] -0.5367336 -1.09813514 -0.41355160  0.48842438  1.1974492 -0.10119078 #>              M7        M8        M9         M10        M11        M12 #> [1,]  0.7671144 -0.804897 0.3262766 -0.04096526  0.1119893 -1.4802215 #> [2,]  0.5708139 -1.350358 1.2661176 -0.29800450  1.5093193 -1.7855316 #> [3,] -1.1650013  1.977935 1.3431788 -0.12970635 -0.9834703 -0.3147970 #> [4,] -0.7775283 -0.746832 0.9444932 -2.91674074  2.2641524  0.4704194 #> [5,]  1.9539779  1.764747 0.1429410  2.10091628  0.6983898  0.1990981 #> [6,] -0.9326512  0.632527 0.4831236  0.13215381 -1.0693534 -1.2281335 #>             M13        M14        M15        M16         M17        M18 #> [1,]  0.9515425  1.7344801  0.7283838  1.5096686 -0.70678343 -0.7804054 #> [2,]  0.4337681 -1.6928977  0.3748492 -1.0462682  0.48978747 -0.5498706 #> [3,]  1.6139587  1.2109272 -0.1288446  0.5108508 -0.12998839 -0.9022660 #> [4,] -0.3421771  0.6286474  0.8671723 -2.9163356 -1.56500872 -0.5651489 #> [5,]  0.8656623  2.5523550  0.1435542 -2.1236006  0.09157872  1.2678717 #> [6,] -0.6549213 -0.5925755 -2.5477310  0.7500170 -0.51299443  1.1257781 #>              M19         M20         M21         M22        M23         M24 #> [1,]  0.12823659 -0.40746886 -0.49327375  0.46140216  0.1733370 -1.44575321 #> [2,] -0.07716728  0.33338100  0.07615032 -2.21130520  0.8075281 -0.07639087 #> [3,]  1.38120342 -1.01202403  0.10542017 -0.05417739 -0.4255744 -0.52562429 #> [4,]  0.85898956 -0.86596349  0.06764030 -1.84735040 -0.2070313 -1.01033975 #> [5,] -0.30695813 -1.28854668 -0.36600262  0.65950367  0.7041140  1.63061670 #> [6,]  2.98663955  0.07652582  2.57231714  0.23321110  1.3348329  1.05416176 #>             M25        M26        M27         M28        M29        M30 #> [1,]  0.8688064  0.6605519  1.7138658  0.14957049  0.8805247  1.8291074 #> [2,]  0.6549450 -0.2526353 -0.5923664 -0.73525484  2.2310318  0.8751341 #> [3,]  1.0737954 -0.9129543 -0.9474339 -0.15020652  1.2811060  0.7752486 #> [4,] -2.1671731 -1.2010788  1.4954428 -0.07245362 -1.0927275 -0.5051496 #> [5,] -0.7421040 -0.8142610  1.3545506  0.97647643  0.1308949 -0.1582398 #> [6,] -0.4292953 -0.7008030  1.7662054 -0.23916112 -0.1777651 -1.7239776 #>              M31        M32        M33        M34         M35       M36 #> [1,]  0.01140657  0.2914104  0.5075838  0.3649896  1.08934915 0.5725834 #> [2,]  0.29888797  0.3297477 -1.7638165 -1.9386282  1.02824102 0.9925051 #> [3,] -0.29543844 -0.1356256  0.3631291  1.5739610 -0.88499943 0.4285352 #> [4,]  0.94666142 -1.0219818 -0.7460691  0.1643160 -0.90018543 0.7913280 #> [5,] -1.25717405 -0.3698548 -1.3538105 -0.6049487  0.27441794 1.1551193 #> [6,] -0.40708169  1.0731787  1.2274653  1.2187296 -0.04722578 1.9127676 #>             M37        M38        M39       M40        M41        M42 #> [1,] -1.5816528  1.4868981 -1.2102815 1.4202218 -0.8488640 -0.4892918 #> [2,] -0.4655932  0.4693938  1.0968342 0.5698962 -1.0671102 -0.7690780 #> [3,] -0.7758478 -1.0636917  0.9941119 0.9576331  1.5804221  0.4989825 #> [4,]  0.3452347 -0.4168524 -1.6969934 0.6369699 -0.6090653  0.5148267 #> [5,] -0.1302863 -0.8653963  0.4983362 2.0693718  2.2487388  0.7790776 #> [6,] -1.1491320 -1.2413385  1.0659883 1.6874090  0.6976956  2.1455033 #>             M43         M44        M45         M46        M47        M48 #> [1,]  1.3387938  0.92453777  1.7560679 -1.82493613 -0.5738911 -0.4979661 #> [2,] -1.5209640  0.97001854  0.5107750  0.16980737  0.5629689  1.1825584 #> [3,] -0.2222986  0.41851353 -1.2354896  0.28520678 -0.1803093  1.2498444 #> [4,] -0.8328782 -1.08033563 -0.5954615  0.05560754  0.8396333  0.1940971 #> [5,]  0.1640344  0.05609372 -0.2017638 -0.12226275  0.0823320 -0.1687620 #> [6,]  0.6146529  0.72977946  1.0094568  0.79106197  1.1246688 -0.1914467 #>              M49        M50        M51        M52         M53        M54 #> [1,]  1.05664644  0.4525241  0.1930294  1.1768248 -1.39369903  0.2672023 #> [2,]  0.84221869 -0.7548134  1.4775800 -0.8570372  0.07606974 -1.6469116 #> [3,]  1.14703108 -0.2019577 -1.1448762  1.8974470 -0.29395616 -0.4386511 #> [4,] -0.45951259  0.4075782  0.3123060  0.6826160 -0.75796366  0.9048632 #> [5,]  0.17670981  2.3286003  0.3688321 -0.8020731 -0.79867582  0.8834646 #> [6,] -0.03988408 -1.4196069  0.5271771 -1.1263211  0.42871027  0.4461303 #>             M55        M56          M57        M58        M59        M60 #> [1,]  0.1051527  1.3538501  0.628765970 -1.4315778 -1.0080418  1.6323990 #> [2,] -0.6637260 -0.1114877 -1.224397472  0.1827549 -0.5149444 -0.5323562 #> [3,] -0.6043152 -0.4994222  0.779507524 -0.1623187 -0.3549908  2.1106864 #> [4,] -0.5498873 -2.1514475 -1.799914407 -2.1525857 -0.5718581 -0.5408472 #> [5,] -0.8078095  1.8013760  0.007164344 -1.8994773  0.2331146 -1.0067394 #> [6,]  1.7182077 -0.5063559  1.778488544  1.2099194  0.1874147 -1.1830699 #>              M61        M62        M63        M64         M65        M66 #> [1,]  1.29784039  0.5083949 -0.1727160 -1.0070135  0.07864695 -1.2413463 #> [2,]  0.58110911 -1.2494192 -1.4156795  1.2283734  0.24846525  0.5505654 #> [3,]  0.02975303 -0.1631824 -2.4030992  0.7146001  1.05792359 -0.6686169 #> [4,] -0.60313470 -0.2529380 -0.6931866 -0.3864072 -0.18675030  0.6161867 #> [5,] -0.55415737  1.4666995 -0.6539787  0.5514469  1.51749306  1.7960789 #> [6,]  0.47727611 -0.2627578  2.0948647  0.1170738  1.51410618  1.8891771 #>             M67        M68        M69        M70        M71         M72 #> [1,] -0.2082777  0.1953478  2.2462927  1.1239853 -0.8886593 -0.49535167 #> [2,] -0.4130883  0.1691805 -0.9707836  0.4673199 -0.2183907 -1.41996390 #> [3,]  1.6805910  1.1422207 -1.9442055 -1.1183200  0.7692355  0.12626507 #> [4,] -1.6502159 -0.1510277 -0.6981349  0.6134938  0.3721059  0.06944933 #> [5,]  1.2793783 -0.5184597  0.4482489  0.9949862 -0.5970378  0.48951290 #> [6,]  0.7242190  0.1036103  0.3457743  1.2104396  1.1233600 -0.23605563 #>              M73        M74        M75        M76          M77         M78 #> [1,]  1.34116180 -0.3714890  1.1861243  0.7943543 -0.233968021  0.89441013 #> [2,] -1.60037258 -1.3360349 -0.7946631  1.2736373 -0.933725246 -0.62221499 #> [3,] -0.88011148  0.6433123  0.6015969  2.7644875 -0.897178078 -0.30367469 #> [4,] -0.04072279 -0.1655819 -0.3292523  0.1723502 -0.009659608 -1.22131385 #> [5,]  0.45858911  0.6302948  0.1602041 -0.8151253  0.073017945  0.60094135 #> [6,]  0.58738767  0.4359742 -1.5765565  2.1449710  0.469621974  0.04093697 #>             M79        M80         M81          M82        M83        M84 #> [1,] -0.1907340 -0.4515134  0.01089041  0.532557612  0.4515331  0.2129983 #> [2,] -1.2006326 -0.8535195 -0.60614933  0.200645383  0.4768520 -0.5241239 #> [3,] -0.6121369  1.3761576  0.69613107  0.757212036 -0.9932301  0.6927489 #> [4,] -0.2285029 -0.6845087 -0.09296953 -0.002010584 -0.1240725 -1.3831319 #> [5,]  1.2039117 -0.9619433  0.82208498 -0.123498317  0.2613388  1.7710743 #> [6,]  0.9982752 -2.0204699 -0.38247679 -0.508292466 -0.8101829 -0.6172028 #>             M85        M86        M87        M88        M89        M90 #> [1,]  1.4048001  1.8275532 -1.2579331 -2.3508205 -0.2853930  0.3839088 #> [2,] -0.8220202  0.2277155 -0.7175042 -1.3510001  0.5126634  0.4680439 #> [3,] -0.4062063 -0.7159284 -0.1743167 -0.4224354 -1.1480502 -0.8299133 #> [4,] -0.5445979 -2.8517571 -0.1393255 -0.3137473  0.2859264  0.6778276 #> [5,]  1.8688637  0.1041730 -0.2828779  0.3604942  0.3101008  0.1471100 #> [6,]  1.2153132  0.1296473 -0.5499495 -1.2385831  1.3352138  0.3650290 #>             M91         M92        M93         M94        M95         M96 #> [1,]  0.5000214 -0.05595704  1.2806533  1.20448739  0.8926552 -0.09007026 #> [2,] -1.6928767 -1.74691315 -0.2434929 -0.21739272 -0.8100143 -0.58806234 #> [3,]  1.7341601  1.19262129  0.6100946 -0.04011231 -1.5495743  1.68171414 #> [4,] -1.7111338 -0.56350133 -1.0656337 -2.37834434 -0.2284628  1.74243962 #> [5,]  0.2144922  0.85292880 -0.1562005  0.57388089 -1.1696349 -0.26759877 #> [6,]  1.4726883 -0.92639694  0.6045032  0.71380803  1.5039876  0.34378099 #>              M97         M98         M99       M100 #> [1,]  0.02330135 -0.42370277 -0.04844130  0.6134511 #> [2,] -0.27441857 -0.98498103  0.66076233 -1.2673000 #> [3,]  0.26543242 -0.90705952  0.57590889  1.4259155 #> [4,] -0.01262850 -0.36885479 -0.42566648  0.1728041 #> [5,] -0.24999333 -0.04904358  1.03188373  0.9297149 #> [6,]  0.08299186  0.52576547  0.02660241  1.2683944"}]
